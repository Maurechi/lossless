/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LERC20Interface extends ethers.utils.Interface {
  functions: {
    "acceptRecoveryAdminOwnership(bytes)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "executeLosslessTurnOff()": FunctionFragment;
    "executeLosslessTurnOn()": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isLosslessOn()": FunctionFragment;
    "isLosslessTurnOffProposed()": FunctionFragment;
    "losslessTurnOffTimestamp()": FunctionFragment;
    "name()": FunctionFragment;
    "proposeLosslessTurnOff()": FunctionFragment;
    "recoveryAdmin()": FunctionFragment;
    "setLosslessAdmin(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "timelockPeriod()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOutBlacklistedFunds(address[])": FunctionFragment;
    "transferRecoveryAdminOwnership(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptRecoveryAdminOwnership",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLosslessTurnOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeLosslessTurnOn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLosslessOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLosslessTurnOffProposed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessTurnOffTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeLosslessTurnOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLosslessAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOutBlacklistedFunds",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRecoveryAdminOwnership",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptRecoveryAdminOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLosslessTurnOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLosslessTurnOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLosslessOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLosslessTurnOffProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessTurnOffTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeLosslessTurnOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLosslessAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOutBlacklistedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRecoveryAdminOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "LosslessTurnOffProposed(uint256)": EventFragment;
    "LosslessTurnedOff()": EventFragment;
    "LosslessTurnedOn()": EventFragment;
    "RecoveryAdminChangeProposed(address)": EventFragment;
    "RecoveryAdminChanged(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTurnOffProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTurnedOff"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTurnedOn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RecoveryAdminChangeProposed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type LosslessTurnOffProposedEvent = TypedEvent<
  [BigNumber],
  { turnOffDate: BigNumber }
>;

export type LosslessTurnOffProposedEventFilter =
  TypedEventFilter<LosslessTurnOffProposedEvent>;

export type LosslessTurnedOffEvent = TypedEvent<[], {}>;

export type LosslessTurnedOffEventFilter =
  TypedEventFilter<LosslessTurnedOffEvent>;

export type LosslessTurnedOnEvent = TypedEvent<[], {}>;

export type LosslessTurnedOnEventFilter =
  TypedEventFilter<LosslessTurnedOnEvent>;

export type RecoveryAdminChangeProposedEvent = TypedEvent<
  [string],
  { candidate: string }
>;

export type RecoveryAdminChangeProposedEventFilter =
  TypedEventFilter<RecoveryAdminChangeProposedEvent>;

export type RecoveryAdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type RecoveryAdminChangedEventFilter =
  TypedEventFilter<RecoveryAdminChangedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface LERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeLosslessTurnOn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLosslessOn(overrides?: CallOverrides): Promise<[boolean]>;

    isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<[boolean]>;

    losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    proposeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<[string]>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timelockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptRecoveryAdminOwnership(
    key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeLosslessTurnOff(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeLosslessTurnOn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLosslessOn(overrides?: CallOverrides): Promise<boolean>;

  isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<boolean>;

  losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  proposeLosslessTurnOff(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoveryAdmin(overrides?: CallOverrides): Promise<string>;

  setLosslessAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timelockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOutBlacklistedFunds(
    from: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferRecoveryAdminOwnership(
    candidate: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeLosslessTurnOff(overrides?: CallOverrides): Promise<void>;

    executeLosslessTurnOn(overrides?: CallOverrides): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLosslessOn(overrides?: CallOverrides): Promise<boolean>;

    isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<boolean>;

    losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    proposeLosslessTurnOff(overrides?: CallOverrides): Promise<void>;

    recoveryAdmin(overrides?: CallOverrides): Promise<string>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timelockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): AdminChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "LosslessTurnOffProposed(uint256)"(
      turnOffDate?: null
    ): LosslessTurnOffProposedEventFilter;
    LosslessTurnOffProposed(
      turnOffDate?: null
    ): LosslessTurnOffProposedEventFilter;

    "LosslessTurnedOff()"(): LosslessTurnedOffEventFilter;
    LosslessTurnedOff(): LosslessTurnedOffEventFilter;

    "LosslessTurnedOn()"(): LosslessTurnedOnEventFilter;
    LosslessTurnedOn(): LosslessTurnedOnEventFilter;

    "RecoveryAdminChangeProposed(address)"(
      candidate?: string | null
    ): RecoveryAdminChangeProposedEventFilter;
    RecoveryAdminChangeProposed(
      candidate?: string | null
    ): RecoveryAdminChangeProposedEventFilter;

    "RecoveryAdminChanged(address,address)"(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): RecoveryAdminChangedEventFilter;
    RecoveryAdminChanged(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): RecoveryAdminChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeLosslessTurnOn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLosslessOn(overrides?: CallOverrides): Promise<BigNumber>;

    isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<BigNumber>;

    losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    proposeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoveryAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timelockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeLosslessTurnOn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLosslessOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLosslessTurnOffProposed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessTurnOffTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
